function git_add_commit {
  if [ $2 ]; then
    g_add=$1
    g_msg=$2
  else
    return "Enter a commit message"
  fi
  git add $g_add
  git commit -m $g_msg
}

function git_add_commit_push {
  git_add_commit $1 $2
  g_branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  git push -u origin $g_branch
}

function git_branch_delete {
  case $1 in
  '-l')
    shift
    git_branch_delete_local "$@"
    ;;
  '-r')
    shift
    git_branch_delete_remote "$@"
    ;;
  '-lr'|'-rl')
    shift
    git_branch_delete_local_and_remotes "$@"
    ;;
  *)
    echo "Usage: $0: At least one flag is required:
    -l branch_name[s, ...]            # deletes local branch only
    -r [remote/]branch_name[s, ...]   # delete remote branch only
    -lr|-rl [remote/]branch_name[s, ...] # deletes local and remote branches
    If no remote provided for -r|-lr|-rl, origin is assumed
    "
    return 1
    ;;
  esac
}

function git_branch_delete_local {
  local_branches=()
  for branch in $@
  do
    remote_and_or_branch=( $(echo $branch | tr "/" " ") )
    length=${#remote_and_or_branch}
    local_branches+=("${remote_and_or_branch[$length]}")
  done

  echo "${YLW}Deleting local branch(es): $local_branches${NONE}"
  git branch -D $local_branches
}

function git_branch_delete_remote {
  for remote_branch in $@
  do
    remote_and_or_branch=( $(echo $remote_branch | tr "/" " ") )
    if [ ${#remote_and_or_branch} -eq 2 ]; then
      remote=${remote_and_or_branch[1]}
      branch=${remote_and_or_branch[2]}
    else
      remote='origin'
      branch="$remote_and_or_branch"
    fi

    echo "${YLW}Deleting remote branch: $remote/$branch${NONE}"
    git push $remote --delete $branch
    grpo
  done
}

function git_branch_delete_local_and_remotes {
  if [ $# -lt 1 ]; then
    return "Usage: $0 [remote/]branch_name[s, ...]"
  fi

  git_branch_delete_local $@
  git_branch_delete_remote $@
  grpo
}

function git_commit_push {
  git commit -m $1 && git push
}


function git_diff_file {
  if [ $3 ]; then
    commit2=$3
  else
    commit2="HEAD"
  fi

  if [ $2 ]; then
    file=$1
    commit1=$2
    git diff $commit1 $commit2 $file
  else
    echo "Usage: git_diff_file COMMIT FILE_NAME" >&2; return 1
  fi
}

function git_ignore_and_remove {
  echo $1 >> ./.gitignore; git rm --cached $1
}

function git_lastnhashes {
  git rev-list --max-count=$1 HEAD
}

function git_stash_apply_saved_stash {
  if [ ! -n $1 ]; then
    echo "Usage $0: Must enter a stash name"
  else
    git stash apply stash^{/"$1"}
  fi
}

function test_git_branch_delete {
  local log_file="$PWD/.tgbd.log"

  if [ ! -f "$log_file" ]; then touch $log_file; fi

  # Check for req'd arg
  if [ $# -lt 1 ]
  then
    local message="Usage $0: Must specify local and/or remote: -{l|r|lr|rl}"
    echo $message && echo $message >> $Log_file
    return 1
  fi

  local flag=$1
  shift

  # Check for optional branch names
  local branch_names=()
  if [ $1 ] # note: this is the new $1 after the shift above
  then
    branch_names+=( "$@" )
  else
    branch_names+=(git_branch_delete_test_branch1 git_branch_delete_test_branch2)
  fi

  # Stash if any uncommited changes
  local git_status=$(git status | grep 'nothing to commit')
  echo "Git status: $git_status" >> $log_file
  if [[ -z "$git_status" ]] # if true, means there are things to commit
  then
    local stash_name=branch_deletion_testing
    gstsv $stash_name
    echo
  fi

  # Create each branch
  for branch_name in $branch_names
  do
    gcob $branch_name >> $log_file
    # Push branch to origin if -r was specified
    if [[ "$flag" == "-lr" ]] || [[ "$flag" == "-rl" ]]
    then
      gacp . "Create test branch: $branch_name" >> $log_file 2>&1
    fi

    # Return to master branch
    gcofm
    echo
  done

  # Prepend 'origin/' to the second branch name to make sure 
  # the remote-prefixed and the bare branch name both work
  branch_names[2]="origin/${branch_names[2]}"

  echo "$branch_names"
  gbd $flag $branch_names
  echo

  # List branches for visual verification
  echo 'Pre clean up git branch --all'
  gba

  # Attempt to recover saved stash
  if [[ -z "$git_status" ]]
    then gstass $stash_name
  fi

  # Success check
  was_successful $branch_names
  # Clean up and post clean gba
  clean_up_test_branches
}
alias 'tgbd=test_git_branch_delete'

function was_successful {
  check=()
  for branch_name in $1
  do
    check+=( $(gba | grep "$branch_name") )
  done
  if [ ${#check} == 0 ]
  then
    echo "Success!"
  else
    echo "Uh-oh! :("
    gba
  fi
}

function clean_up_test_branches {
  local grep_pattern=delete_test
  if [ $1 ]; then grep_pattern="$1"; fi
  gfa
  local branches=( $(gba | grep $grep_pattern | tr "\n " " " ) )
  echo "BRANCHES: $branches"
  for branch in $branches
  do
    local remote=${branch#'remotes/'}
    if [[ -z "$remote" ]]
    then
      echo "DELETING local branch: $branch"
      gbd -l $branch
    else
      echo "DELETING remote branch: $remote"
      gbd -r $remote
    fi
  done
  echo 'Post clean up `git branch --all`:'
  gba
}
alias cutb=clean_up_test_branches

echo 'Sourced .git_functions'