#!/usr/bin/env ruby -w

args = ARGV.length == 1 ? ARGV[0].to_s : ""
if args.include?("PARTNER_ENV")
  $stdout.puts("PARTNER_ENV is not a valid env var. Did you mean TENANT? (y/n)")
  resp = gets.chomp[0]
  unless %(y Y).include? resp
    exit
  end
  args.gsub!("PARTNER_ENV", "TENANT")
end

############################
# Check node compatibility #
############################
child = Thread.new do
  Thread.current[:res] = `yarn 2>&1`.split("\n")
end

# Thread used to timeout `yarn` command after 7 seconds (meaning no node incompatibility)
timeout = Thread.new do
  sleep 10
end

##################
# Finger spinner #
##################
i = 0
fpi = 250000
curr_pos = 0
positions = [
  ["", "\t\t\tðŸ‘‡", "\t\t  \t ", "\t\t\t "],
  ["", "\t\t\t ", "\t\t\t\tðŸ‘ˆ", "\t\t\t "],
  ["", "\t\t\t ", "\t\t\t\t ", "\t\t\tðŸ‘†"],
  ["", "\t\t\t ", "\t\tðŸ‘‰\t ", "\t\t\t "]
]

while child.status && timeout.status do
  if i % fpi == 0
    system "clear"
    $stdout.puts "Checking node compatibility"
    $stdout.puts positions[curr_pos]
    curr_pos = (curr_pos + 1) % 4
  end
  i += 1
end

# Once one of the threads finishes, make sure both are stopped
child.kill if child.status
timeout.kill if timeout.status
$stdout.puts

###########################################
# See if node version needs to be changed #
###########################################
switch = nil
install = nil
expected_major_version = nil
cmd = "yarn && (yarn run dev || yarn run develop || yarn run start)"

child[:res]&.first(10)&.each do |line|
  next unless line&.include? "The engine \"node\" is incompatible with this module. Expected version"

  switch = true
  _, versions = line.split("Expected version \"")
  # expected_version, actual_version = versions.gsub(/[a-zA-Z\^"]|\.\s/, '').split(' ')
  expected_version, actual_version = versions.split("\". Got \"")
  expected_major_version = expected_version.split(' ').last.split('.').first.gsub(/[a-zA-Z\^<>=]*/, '')

  system "clear"
  $stdout.puts "Expected: #{expected_version}; Actual: #{actual_version}"
  break
end

if switch
  $stdout.puts "Checking that required node version is installed: v#{expected_major_version}"
  switch_cmd = ". /usr/local/opt/nvm/nvm.sh && nvm use #{expected_major_version}"
  res = `#{switch_cmd} 2>&1`
  install = res.include?("is not yet installed")
  if install
    $stdout.puts "Installing node v#{expected_major_version}"
    system ". /usr/local/opt/nvm/nvm.sh && nvm install #{expected_major_version}"
  end
end

############################
# Run `yarn run dev(elop)` #
############################
$stdout.puts "Switching to node v#{expected_major_version}" if switch && expected_major_version
$stdout.puts "Running `yarn && yarn run dev|develop|start`"
system("#{args} #{(switch_cmd + ' && ') if switch} #{cmd}") || puts(child[:res])
