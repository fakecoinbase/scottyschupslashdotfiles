#!/usr/bin/env ruby -w

begin
  require 'colorize'
rescue LoadError => err
  dependency = err.message.split(" -- ").last
  begin
    $stderr.puts "Attempting to install #{dependency}"
    `gem install #{dependency}`
  rescue StandardError => err
    $stderr.puts "Error attempting to install #{dependency}"
    $stderr.puts err
    $stderr.puts "Git Branch History is missing a dependency: #{dependency}\nMake sure the following command completes successfully before using this script.\n\tgem install #{dependency}"
    exit
  end
end

#########
# SETUP #
#########
class GitBranchTracker
  DIR_NAME = "#{ENV['HOME']}/.git_branch_history"

  def initialize(args:)
    @args = args
    @file_name = `git rev-parse --show-toplevel`.chomp.split('/')[-1]
    @file_path = "#{DIR_NAME}/#{@file_name}"
    `mkdir #{DIR_NAME}` unless Dir.exist? DIR_NAME
    `touch "#{@file_path}"`
  end

  def usage
    $stdout.puts "USAGE: git_branch_history CMD [ARGS]"
    $stdout.puts "CMDs:  add|current|csv|delete|get|help|last|list|ls|push|remove|rm|set|open"
    $stdout.puts "\tpush/set/add:  add branch to history"
    $stdout.puts "\t\tARGS: branch_name (default: current branch)\n\n"
    $stdout.puts "\tlast/get:      get last (n) branch(es)"
    $stdout.puts "\t\tARGS: number_of_branches_to_retrieve (default: 1)\n\n"
    $stdout.puts "\tls/list:          list all branches (optionally that match a grep)"
    $stdout.puts "\t\tARGS: (optional) string to grep\n\n"
    $stdout.puts "\tcsv:           list all branches, comma-separated (optionally that match a grep)"
    $stdout.puts "\t\tARGS: (optional) string to grep\n\n"
    $stdout.puts "\trm/remove/delete: delete specified branch from history"
    $stdout.puts "\t\tARGS: branch_name (required)\n\n"
    $stdout.puts "\thelp:          Print this message"
    $stdout.puts "\topen:          Open the branch history file"
  end

  def add_branch!
    branch = @args.shift || current_branch
    branches_arr.delete branch
    branch == current_branch ? branches_arr << branch : branches_arr.unshift(branch)
    update_file!
  end

  def branches_arr
    unless File.file? @file_path
      $stderr.puts "WARN: #{@file_path} is not a file.".yellow
      exit
    end
    @branches ||= begin
      file = File.open("#{@file_path}", "r+")
      branches = file.readlines.map(&:strip)
      file.close
      branches.compact
    end
    @branches
  end

  def check_order
    # Make sure current branch isn't also last branch
    if branches_arr.last == current_branch && branches_arr.length > 1
      branches_arr[-1], branches_arr[-2] = branches_arr[-2], branches_arr[-1]
      update_file!
    end
  end

  def current_branch
    @current_branch ||= `git symbolic-ref -q HEAD`.strip.gsub("refs/heads/", "")
  end

  def current_branch_pretty
    "#{current_branch} (current)".cyan
  end

  def last_branch
    branches = branches_arr.dup
    branches.delete current_branch
    n = (@args.shift || 1).to_i

    return current_branch_pretty if branches.length < n
    branches[-n..-1]
  end

  def remove_branch!
    branch = @args.shift
    branches_arr.delete branch
    check_order
    update_file!
  end

  def update_file!
    file = File.open("#{@file_path}", "w+")
    branches_arr.each { |branch| file.puts branch }
    file.close
  end

  def main
    if @args.length == 0 || @args[0] == "help"
      usage
      return
    end

    cmd = @args.shift

    case cmd
    when "push", "set", "add"
      add_branch!
    when "last", "get"
      check_order
      $stdout.puts last_branch
    when "list", "all", "csv", "ls"
      check_order
      branches = branches_arr
      grep = @args.shift
      branches.select! { |branch| branch.include?(grep) } unless grep.nil?
      if cmd == "csv"
        branches = branches.join(", ")
      else
        branches.map! do |branch|
          current_branch == branch ? "#{branch} (current)".cyan : branch
        end
      end
      $stdout.puts branches
    when "remove", "delete", "rm"
      if @args.empty?
        $stdout.puts "Must specify a branch to remove"
        return
      end
      remove_branch!
    when "current"
      $stdout.puts current_branch
    when "open"
      check_order
      if !`which atom`.empty?
        `atom #{@file_path}`
      elsif !`which subl`.empty?
        `subl #{@file_path}`
      else
        $stdout.puts "Neither Atom nor Sublime available"
      end
    else
      usage
    end
  end
end

tracker = GitBranchTracker.new args: ARGV
tracker.main
