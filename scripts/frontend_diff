#! /usr/bin/env ruby -w

# A tool for seeing what frontend changes you're pulling in when you create a new version

require 'optparse'

class FrontendStylesDiff
  class InvalidDirectoryError < StandardError; end
  class InvalidGitShaError < StandardError; end
  class ParserError < StandardError; end

  GLOBAL_DEPENDENCY_FILES = %w(package.json yarn.lock)
  GLOBAL_FONTS_PATTERN = /packages\/styles\/src\/fonts/
  GLOBAL_IMAGES_PATTERN = /packages\/styles\/src\/images\/(?!partners)/
  GLOBAL_STYLES_PATTERN = /packages\/styles\/src\/styles\/(?!theme|core)/
  PARTNER_IMAGES_PATTERN = /packages\/styles\/src\/images\/partners/
  PARTNER_STYLES_PATTERN = /packages\/styles\/src\/styles\/(theme|core)/

  def initialize(git_dir: nil, verbose: false)
    @git_dir = git_dir || Dir.pwd
    raise(InvalidDirectoryError, "Invalid directory: #{@git_dir}") unless @git_dir =~ /.*frontend$/
    @diff_strs = {}
    @verbose = verbose
  end

  def simple_analysis(original_sha, new_sha, width: 1000)
    @analysis = {}
    @analysis[:files] = diff_str_to_arr original_sha, new_sha, width: 1000

    # Possible global changes
    @analysis[:global_dependencies] = (global_dependencies_changed || ["No global dependency changes"]).join("\n\t\t")
    @analysis[:global_fonts] = (global_fonts_changed || ["No global font changes"]).join("\n\t\t")
    @analysis[:global_images] = (global_images_changed || ["No global image changes"]).join("\n\t\t")
    @analysis[:global_styles] = (global_styles_changed || ["No global style changes"]).join("\n\t\t")

    # Possible partner-specific changes
    @analysis[:partner_images] = (partner_images_changed || ['No partner image changes']).join("\n\t\t")
    @analysis[:partner_styles] = (partner_styles_changed || ["No global image changes"]).join("\n\t\t")

    puts all_affected_files if @verbose
    puts all_affected_areas
  end

  private

  def diff_str(original_sha, new_sha, width: nil)
    width ||= 1000
    arg_string = "#{width} #{original_sha} #{new_sha}"
    # @diff_strs[arg_string] ||= `cd #{@git_dir}; git diff --stat=#{arg_string}`
    p "Running command: \`cd #{@git_dir}; git diff --stat=#{arg_string}\`"
    `cd #{@git_dir}; git diff --stat=#{arg_string}`
  end

  def diff_str_to_arr(*args, **kwargs)
    result = diff_str(*args, **kwargs)
    arr = result.split("\n")
    arr.map do |line|
      raise(InvalidDirectoryError, "Invalid directory: #{line}") if line == "Not a git repository"
      begin
        line.split(/\s+\|\s/).first.strip
      rescue
        raise ParserError, "Parsing error:\n\t\t\"#{line}\""
      end
    end
  end

  ###################
  # Print summaries #
  ###################
  def all_affected_areas
    results = (@analysis.keys - %i(files)).map do |key|
      "\t#{key.to_s.upcase}\n\t\t#{@analysis[key]}"
    end

    ["\nALL AFFECTED AREAS\n"] + results
  end

  def all_affected_files
    ["\nALL AFFECTED FILES\n"] + @analysis[:files].map { |file| "\t#{file}" }
  end

  ###################
  # Change checkers #
  ###################
  def global_dependencies_changed
    matches = GLOBAL_DEPENDENCY_FILES.inject([]) do |agg, file|
      agg << file if @analysis[:files].map(&:strip).include?(file)
      agg
    end
    matches.empty? ? nil : matches
  end

  def global_fonts_changed
    matches = []
    @analysis[:files].each do |file|
      matches << file if file =~ GLOBAL_FONTS_PATTERN
    end
    matches.empty? ? nil : matches
  end

  def global_images_changed
    matches = []
    @analysis[:files].each do |file|
      matches << file if file =~ GLOBAL_IMAGES_PATTERN
    end
    matches.empty? ? nil : matches
  end

  def partner_images_changed
    matches = []
    @analysis[:files].each do |file|
      matches << file if file =~ PARTNER_IMAGES_PATTERN
    end
    matches.empty? ? nil : matches
  end

  def global_styles_changed
    matches = []
    @analysis[:files].each do |file|
      matches << file if file =~ GLOBAL_STYLES_PATTERN
    end
    matches.empty? ? nil : matches
  end

  def partner_styles_changed
    matches = []
    @analysis[:files].each do |file|
      matches << file if file =~ PARTNER_STYLES_PATTERN
    end
    matches.empty? ? nil : matches
  end
end

################
# Shell script #
################
def usage
  "Usage: frontend_diff original_sha new_sha [OPTIONS]"
end

if $PROGRAM_NAME == __FILE__
  options = {}
  OptionParser.new do |opts|
    opts.banner = usage

    opts.on("-rROOT", "--root=ROOT", "Absolute path to your local frontend repo") do |r|
      options[:root] = r
    end
    opts.on("-v", "--verbose", "Displays all affected files, not just changes to `packages/styles`") do |v|
      options[:verbose] = true
    end
    opts.on("-wWIDTH", "--width=WIDTH", "Default: 1000; only change this if file paths are being truncated") do |w|
      options[:width] = w
    end
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end.parse!

  if ARGV.length < 2
    puts("Wrong number of arguments: must have at least 2 git SHAs\n#{usage}")
    exit
  end

  diff = FrontendStylesDiff.new git_dir: options[:root], verbose: options[:verbose]
  diff.simple_analysis(*ARGV.first(2), width: options[:width])
end
